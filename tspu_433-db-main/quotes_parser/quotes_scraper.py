import requests
from bs4 import BeautifulSoup
import sqlite3
import time

def get_quotes():
    base_url = "http://quotes.toscrape.com/page/{}/"
    quotes_data = []

    for page_num in range(1, 11):  # –ü–∞—Ä—Å–∏–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
        url = base_url.format(page_num)
        print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")

        try:
            response = requests.get(url, timeout=5)
            response.raise_for_status()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –Ω–µ 200
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {url}: {e}")
            continue

        soup = BeautifulSoup(response.text, 'html.parser')
        quotes = soup.find_all('div', class_='quote')

        for quote in quotes:
            text = quote.find('span', class_='text').text
            author = quote.find('small', class_='author').text
            tags = [tag.text for tag in quote.find_all('a', class_='tag')]

            quotes_data.append({
                "text": text,
                "author": author,
                "tags": tags
            })

        time.sleep(1)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç

    return quotes_data

def insert_quotes_to_db(quotes_data):
    conn = sqlite3.connect('quotes.db')
    cur = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    cur.execute('''CREATE TABLE IF NOT EXISTS authors (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE
    )''')

    cur.execute('''CREATE TABLE IF NOT EXISTS quotes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        text TEXT,
        author_id INTEGER,
        FOREIGN KEY(author_id) REFERENCES authors(id)
    )''')

    cur.execute('''CREATE TABLE IF NOT EXISTS tags (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE
    )''')

    cur.execute('''CREATE TABLE IF NOT EXISTS quote_tag (
        quote_id INTEGER,
        tag_id INTEGER,
        UNIQUE (quote_id, tag_id),
        FOREIGN KEY(quote_id) REFERENCES quotes(id),
        FOREIGN KEY(tag_id) REFERENCES tags(id)
    )''')

    for data in quotes_data:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        cur.execute("INSERT OR IGNORE INTO authors (name) VALUES (?)", (data['author'],))
        cur.execute("SELECT id FROM authors WHERE name = ?", (data['author'],))
        author_id = cur.fetchone()[0]

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
        cur.execute("INSERT INTO quotes (text, author_id) VALUES (?, ?)", (data['text'], author_id))
        quote_id = cur.lastrowid

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏ —Å–≤—è–∑–∏
        for tag in data['tags']:
            cur.execute("INSERT OR IGNORE INTO tags (name) VALUES (?)", (tag,))
            cur.execute("SELECT id FROM tags WHERE name = ?", (tag,))
            tag_id = cur.fetchone()[0]
            cur.execute("INSERT OR IGNORE INTO quote_tag (quote_id, tag_id) VALUES (?, ?)", (quote_id, tag_id))

    conn.commit()
    conn.close()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == '__main__':
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
    quotes_data = get_quotes()
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(quotes_data)} —Ü–∏—Ç–∞—Ç. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    insert_quotes_to_db(quotes_data)
